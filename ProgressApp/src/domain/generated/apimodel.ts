//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class Product implements IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: ProductPrice;
    prices?: { [key: string]: ProductPrice; } | undefined;
    taxRate?: number;
    taxName?: number;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.price = data.price && !(<any>data.price).toJSON ? new ProductPrice(data.price) : <ProductPrice>this.price;
            if (data.prices) {
                this.prices = {};
                for (let key in data.prices) {
                    if (data.prices.hasOwnProperty(key)) {
                        let item = data.prices[key];
                        this.prices[key] = item && !(<any>item).toJSON ? new ProductPrice(item) : <ProductPrice>item;
                    }
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.stock = _data["stock"];
            this.price = _data["price"] ? ProductPrice.fromJS(_data["price"]) : <any>undefined;
            if (_data["prices"]) {
                this.prices = {} as any;
                for (let key in _data["prices"]) {
                    if (_data["prices"].hasOwnProperty(key))
                        (<any>this.prices)![key] = _data["prices"][key] ? ProductPrice.fromJS(_data["prices"][key]) : new ProductPrice();
                }
            }
            this.taxRate = _data["taxRate"];
            this.taxName = _data["taxName"];
            this.categoryName = _data["categoryName"];
            this.categoryId = _data["categoryId"];
            this.barCode = _data["barCode"];
            this.imagesCount = _data["imagesCount"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["description"] = this.description;
        data["stock"] = this.stock;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        if (this.prices) {
            data["prices"] = {};
            for (let key in this.prices) {
                if (this.prices.hasOwnProperty(key))
                    (<any>data["prices"])[key] = this.prices[key] ? this.prices[key].toJSON() : <any>undefined;
            }
        }
        data["taxRate"] = this.taxRate;
        data["taxName"] = this.taxName;
        data["categoryName"] = this.categoryName;
        data["categoryId"] = this.categoryId;
        data["barCode"] = this.barCode;
        data["imagesCount"] = this.imagesCount;
        return data;
    }
}

export interface IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: IProductPrice;
    prices?: { [key: string]: IProductPrice; } | undefined;
    taxRate?: number;
    taxName?: number;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;
}

export class ProductCategory implements IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: ProductCategory[] | undefined;
    parentId?: number | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.subcategories) {
                this.subcategories = [];
                for (let i = 0; i < data.subcategories.length; i++) {
                    let item = data.subcategories[i];
                    this.subcategories[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["subcategories"])) {
                this.subcategories = [] as any;
                for (let item of _data["subcategories"])
                    this.subcategories!.push(ProductCategory.fromJS(item));
            }
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.subcategories)) {
            data["subcategories"] = [];
            for (let item of this.subcategories)
                data["subcategories"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: IProductCategory[] | undefined;
    parentId?: number | undefined;
}

export class ProductCategoryInfoResponse implements IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory;

    constructor(data?: IProductCategoryInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new ProductCategory(data.data) : <ProductCategory>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? ProductCategory.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductCategoryInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory;
}

export class ProductCategoryListResponse implements IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory[] | undefined;

    constructor(data?: IProductCategoryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductCategoryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory[] | undefined;
}

export class ProductListRequest implements IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;

    constructor(data?: IProductListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): ProductListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;
}

export class ProductListResponse implements IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product[] | undefined;

    constructor(data?: IProductListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new Product(item) : <Product>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct[] | undefined;
}

export class ProductPrice implements IProductPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    currencyId?: number | undefined;

    constructor(data?: IProductPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.priceNet = _data["priceNet"];
            this.priceGross = _data["priceGross"];
            this.currencyName = _data["currencyName"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): ProductPrice {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceNet"] = this.priceNet;
        data["priceGross"] = this.priceGross;
        data["currencyName"] = this.currencyName;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IProductPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    currencyId?: number | undefined;
}

export class ProductRequest implements IProductRequest {
    productId?: number;

    constructor(data?: IProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): ProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        return data;
    }
}

export interface IProductRequest {
    productId?: number;
}

export class ProductResponse implements IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product;

    constructor(data?: IProductResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new Product(data.data) : <Product>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? Product.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct;
}
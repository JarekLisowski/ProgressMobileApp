//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class Price implements IPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    taxPercent?: number | undefined;
    taxName?: string | undefined;
    currencyId?: number | undefined;

    constructor(data?: IPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.priceNet = _data["priceNet"];
            this.priceGross = _data["priceGross"];
            this.currencyName = _data["currencyName"];
            this.taxPercent = _data["taxPercent"];
            this.taxName = _data["taxName"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): Price {
        data = typeof data === 'object' ? data : {};
        let result = new Price();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceNet"] = this.priceNet;
        data["priceGross"] = this.priceGross;
        data["currencyName"] = this.currencyName;
        data["taxPercent"] = this.taxPercent;
        data["taxName"] = this.taxName;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    taxPercent?: number | undefined;
    taxName?: string | undefined;
    currencyId?: number | undefined;
}

export class Product implements IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: Price;
    prices?: { [key: string]: Price; } | undefined;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;
    unit?: string | undefined;
    imgUrl?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.price = data.price && !(<any>data.price).toJSON ? new Price(data.price) : <Price>this.price;
            if (data.prices) {
                this.prices = {};
                for (let key in data.prices) {
                    if (data.prices.hasOwnProperty(key)) {
                        let item = data.prices[key];
                        this.prices[key] = item && !(<any>item).toJSON ? new Price(item) : <Price>item;
                    }
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.stock = _data["stock"];
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            if (_data["prices"]) {
                this.prices = {} as any;
                for (let key in _data["prices"]) {
                    if (_data["prices"].hasOwnProperty(key))
                        (<any>this.prices)![key] = _data["prices"][key] ? Price.fromJS(_data["prices"][key]) : new Price();
                }
            }
            this.categoryName = _data["categoryName"];
            this.categoryId = _data["categoryId"];
            this.barCode = _data["barCode"];
            this.imagesCount = _data["imagesCount"];
            this.unit = _data["unit"];
            this.imgUrl = _data["imgUrl"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["description"] = this.description;
        data["stock"] = this.stock;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        if (this.prices) {
            data["prices"] = {};
            for (let key in this.prices) {
                if (this.prices.hasOwnProperty(key))
                    (<any>data["prices"])[key] = this.prices[key] ? this.prices[key].toJSON() : <any>undefined;
            }
        }
        data["categoryName"] = this.categoryName;
        data["categoryId"] = this.categoryId;
        data["barCode"] = this.barCode;
        data["imagesCount"] = this.imagesCount;
        data["unit"] = this.unit;
        data["imgUrl"] = this.imgUrl;
        return data;
    }
}

export interface IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: IPrice;
    prices?: { [key: string]: IPrice; } | undefined;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;
    unit?: string | undefined;
    imgUrl?: string | undefined;
}

export class ProductCategory implements IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: ProductCategory[] | undefined;
    parentId?: number | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.subcategories) {
                this.subcategories = [];
                for (let i = 0; i < data.subcategories.length; i++) {
                    let item = data.subcategories[i];
                    this.subcategories[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["subcategories"])) {
                this.subcategories = [] as any;
                for (let item of _data["subcategories"])
                    this.subcategories!.push(ProductCategory.fromJS(item));
            }
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.subcategories)) {
            data["subcategories"] = [];
            for (let item of this.subcategories)
                data["subcategories"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: IProductCategory[] | undefined;
    parentId?: number | undefined;
}

export class ProductCategoryInfoResponse implements IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory;

    constructor(data?: IProductCategoryInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new ProductCategory(data.data) : <ProductCategory>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? ProductCategory.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductCategoryInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory;
}

export class ProductCategoryListResponse implements IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory[] | undefined;

    constructor(data?: IProductCategoryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductCategoryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory[] | undefined;
}

export class ProductListRequest implements IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;

    constructor(data?: IProductListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): ProductListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;
}

export class ProductListResponse implements IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product[] | undefined;

    constructor(data?: IProductListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new Product(item) : <Product>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct[] | undefined;
}

export class ProductRequest implements IProductRequest {
    productId?: number;

    constructor(data?: IProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): ProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        return data;
    }
}

export interface IProductRequest {
    productId?: number;
}

export class ProductResponse implements IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product;

    constructor(data?: IProductResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new Product(data.data) : <Product>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? Product.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct;
}

export class PromoItem implements IPromoItem {
    id?: number;
    name?: string | undefined;
    setId?: number;
    gratis?: boolean;
    price?: Price;
    quantity?: number;
    discountPercent?: number;
    minimumPrice?: number | undefined;
    discountSetId?: number;
    products?: PromoItemProduct[] | undefined;

    constructor(data?: IPromoItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.price = data.price && !(<any>data.price).toJSON ? new Price(data.price) : <Price>this.price;
            if (data.products) {
                this.products = [];
                for (let i = 0; i < data.products.length; i++) {
                    let item = data.products[i];
                    this.products[i] = item && !(<any>item).toJSON ? new PromoItemProduct(item) : <PromoItemProduct>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.setId = _data["setId"];
            this.gratis = _data["gratis"];
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            this.quantity = _data["quantity"];
            this.discountPercent = _data["discountPercent"];
            this.minimumPrice = _data["minimumPrice"];
            this.discountSetId = _data["discountSetId"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(PromoItemProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoItem {
        data = typeof data === 'object' ? data : {};
        let result = new PromoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["setId"] = this.setId;
        data["gratis"] = this.gratis;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        data["discountPercent"] = this.discountPercent;
        data["minimumPrice"] = this.minimumPrice;
        data["discountSetId"] = this.discountSetId;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoItem {
    id?: number;
    name?: string | undefined;
    setId?: number;
    gratis?: boolean;
    price?: IPrice;
    quantity?: number;
    discountPercent?: number;
    minimumPrice?: number | undefined;
    discountSetId?: number;
    products?: IPromoItemProduct[] | undefined;
}

export class PromoItemProduct implements IPromoItemProduct {
    promoItemId?: number;
    productCode?: string | undefined;
    promoItem?: PromoItem;

    constructor(data?: IPromoItemProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.promoItem = data.promoItem && !(<any>data.promoItem).toJSON ? new PromoItem(data.promoItem) : <PromoItem>this.promoItem;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.promoItemId = _data["promoItemId"];
            this.productCode = _data["productCode"];
            this.promoItem = _data["promoItem"] ? PromoItem.fromJS(_data["promoItem"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoItemProduct {
        data = typeof data === 'object' ? data : {};
        let result = new PromoItemProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["promoItemId"] = this.promoItemId;
        data["productCode"] = this.productCode;
        data["promoItem"] = this.promoItem ? this.promoItem.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoItemProduct {
    promoItemId?: number;
    productCode?: string | undefined;
    promoItem?: IPromoItem;
}

export class PromoResponse implements IPromoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoItem;

    constructor(data?: IPromoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new PromoItem(data.data) : <PromoItem>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? PromoItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoItem;
}

export class PromoSet implements IPromoSet {
    id?: number;
    isDeleted?: boolean;
    validFrom?: Date | undefined;
    validUntil?: Date | undefined;
    name?: string | undefined;
    dataChange?: Date;
    groupChangeDate?: Date | undefined;
    imgUrl?: string | undefined;
    typ?: number;
    items?: PromoItem[] | undefined;

    constructor(data?: IPromoSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new PromoItem(item) : <PromoItem>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validUntil = _data["validUntil"] ? new Date(_data["validUntil"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dataChange = _data["dataChange"] ? new Date(_data["dataChange"].toString()) : <any>undefined;
            this.groupChangeDate = _data["groupChangeDate"] ? new Date(_data["groupChangeDate"].toString()) : <any>undefined;
            this.imgUrl = _data["imgUrl"];
            this.typ = _data["typ"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PromoItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoSet {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validUntil"] = this.validUntil ? this.validUntil.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["dataChange"] = this.dataChange ? this.dataChange.toISOString() : <any>undefined;
        data["groupChangeDate"] = this.groupChangeDate ? this.groupChangeDate.toISOString() : <any>undefined;
        data["imgUrl"] = this.imgUrl;
        data["typ"] = this.typ;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoSet {
    id?: number;
    isDeleted?: boolean;
    validFrom?: Date | undefined;
    validUntil?: Date | undefined;
    name?: string | undefined;
    dataChange?: Date;
    groupChangeDate?: Date | undefined;
    imgUrl?: string | undefined;
    typ?: number;
    items?: IPromoItem[] | undefined;
}

export class PromoSetListResponse implements IPromoSetListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoSet[] | undefined;

    constructor(data?: IPromoSetListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new PromoSet(item) : <PromoSet>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PromoSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoSetListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSetListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoSetListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoSet[] | undefined;
}

export class PromoSetResponse implements IPromoSetResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoSet;

    constructor(data?: IPromoSetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new PromoSet(data.data) : <PromoSet>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? PromoSet.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoSetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoSetResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoSet;
}
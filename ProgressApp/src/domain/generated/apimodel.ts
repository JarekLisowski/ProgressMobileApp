//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class ApiResult implements IApiResult {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;

    constructor(data?: IApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
        }
    }

    static fromJS(data: any): ApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        return data;
    }
}

export interface IApiResult {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
}

export class Customer implements ICustomer {
    id?: number;
    code?: string | undefined;
    regon?: string | undefined;
    email?: string | undefined;
    idOpiekun?: number | undefined;
    adrName?: string | undefined;
    adrNameFull?: string | undefined;
    adrNip?: string | undefined;
    adrTel?: string | undefined;
    adrStreet?: string | undefined;
    adrStreetNo?: string | undefined;
    adrNumber?: string | undefined;
    adrZipCode?: string | undefined;
    adrCity?: string | undefined;
    adrCountryId?: number | undefined;
    adrCountry?: string | undefined;
    adrCountryCode?: string | undefined;
    delivName?: string | undefined;
    delivCode?: string | undefined;
    delivNip?: string | undefined;
    delivTel?: string | undefined;
    delivStreet?: string | undefined;
    delivStreetNo?: string | undefined;
    delivNumber?: string | undefined;
    delivZipCode?: string | undefined;
    delivCity?: string | undefined;
    delivCountryId?: number | undefined;
    delivCountry?: string | undefined;
    delivCountryCode?: string | undefined;
    blocked?: boolean | undefined;
    changeDate?: Date | undefined;
    oneTime?: boolean | undefined;
    custEmploee?: string | undefined;
    payTermin?: boolean | undefined;
    payDays?: number | undefined;
    www?: string | undefined;
    priceId?: number | undefined;
    deferredPayment?: boolean;
    specialPayment?: boolean;
    paymentDeadline?: number;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.regon = _data["regon"];
            this.email = _data["email"];
            this.idOpiekun = _data["idOpiekun"];
            this.adrName = _data["adrName"];
            this.adrNameFull = _data["adrNameFull"];
            this.adrNip = _data["adrNip"];
            this.adrTel = _data["adrTel"];
            this.adrStreet = _data["adrStreet"];
            this.adrStreetNo = _data["adrStreetNo"];
            this.adrNumber = _data["adrNumber"];
            this.adrZipCode = _data["adrZipCode"];
            this.adrCity = _data["adrCity"];
            this.adrCountryId = _data["adrCountryId"];
            this.adrCountry = _data["adrCountry"];
            this.adrCountryCode = _data["adrCountryCode"];
            this.delivName = _data["delivName"];
            this.delivCode = _data["delivCode"];
            this.delivNip = _data["delivNip"];
            this.delivTel = _data["delivTel"];
            this.delivStreet = _data["delivStreet"];
            this.delivStreetNo = _data["delivStreetNo"];
            this.delivNumber = _data["delivNumber"];
            this.delivZipCode = _data["delivZipCode"];
            this.delivCity = _data["delivCity"];
            this.delivCountryId = _data["delivCountryId"];
            this.delivCountry = _data["delivCountry"];
            this.delivCountryCode = _data["delivCountryCode"];
            this.blocked = _data["blocked"];
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
            this.oneTime = _data["oneTime"];
            this.custEmploee = _data["custEmploee"];
            this.payTermin = _data["payTermin"];
            this.payDays = _data["payDays"];
            this.www = _data["www"];
            this.priceId = _data["priceId"];
            this.deferredPayment = _data["deferredPayment"];
            this.specialPayment = _data["specialPayment"];
            this.paymentDeadline = _data["paymentDeadline"];
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["regon"] = this.regon;
        data["email"] = this.email;
        data["idOpiekun"] = this.idOpiekun;
        data["adrName"] = this.adrName;
        data["adrNameFull"] = this.adrNameFull;
        data["adrNip"] = this.adrNip;
        data["adrTel"] = this.adrTel;
        data["adrStreet"] = this.adrStreet;
        data["adrStreetNo"] = this.adrStreetNo;
        data["adrNumber"] = this.adrNumber;
        data["adrZipCode"] = this.adrZipCode;
        data["adrCity"] = this.adrCity;
        data["adrCountryId"] = this.adrCountryId;
        data["adrCountry"] = this.adrCountry;
        data["adrCountryCode"] = this.adrCountryCode;
        data["delivName"] = this.delivName;
        data["delivCode"] = this.delivCode;
        data["delivNip"] = this.delivNip;
        data["delivTel"] = this.delivTel;
        data["delivStreet"] = this.delivStreet;
        data["delivStreetNo"] = this.delivStreetNo;
        data["delivNumber"] = this.delivNumber;
        data["delivZipCode"] = this.delivZipCode;
        data["delivCity"] = this.delivCity;
        data["delivCountryId"] = this.delivCountryId;
        data["delivCountry"] = this.delivCountry;
        data["delivCountryCode"] = this.delivCountryCode;
        data["blocked"] = this.blocked;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["oneTime"] = this.oneTime;
        data["custEmploee"] = this.custEmploee;
        data["payTermin"] = this.payTermin;
        data["payDays"] = this.payDays;
        data["www"] = this.www;
        data["priceId"] = this.priceId;
        data["deferredPayment"] = this.deferredPayment;
        data["specialPayment"] = this.specialPayment;
        data["paymentDeadline"] = this.paymentDeadline;
        return data;
    }
}

export interface ICustomer {
    id?: number;
    code?: string | undefined;
    regon?: string | undefined;
    email?: string | undefined;
    idOpiekun?: number | undefined;
    adrName?: string | undefined;
    adrNameFull?: string | undefined;
    adrNip?: string | undefined;
    adrTel?: string | undefined;
    adrStreet?: string | undefined;
    adrStreetNo?: string | undefined;
    adrNumber?: string | undefined;
    adrZipCode?: string | undefined;
    adrCity?: string | undefined;
    adrCountryId?: number | undefined;
    adrCountry?: string | undefined;
    adrCountryCode?: string | undefined;
    delivName?: string | undefined;
    delivCode?: string | undefined;
    delivNip?: string | undefined;
    delivTel?: string | undefined;
    delivStreet?: string | undefined;
    delivStreetNo?: string | undefined;
    delivNumber?: string | undefined;
    delivZipCode?: string | undefined;
    delivCity?: string | undefined;
    delivCountryId?: number | undefined;
    delivCountry?: string | undefined;
    delivCountryCode?: string | undefined;
    blocked?: boolean | undefined;
    changeDate?: Date | undefined;
    oneTime?: boolean | undefined;
    custEmploee?: string | undefined;
    payTermin?: boolean | undefined;
    payDays?: number | undefined;
    www?: string | undefined;
    priceId?: number | undefined;
    deferredPayment?: boolean;
    specialPayment?: boolean;
    paymentDeadline?: number;
}

export class CustomerListResponse implements ICustomerListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Customer[] | undefined;

    constructor(data?: ICustomerListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new Customer(item) : <Customer>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Customer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomerListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomerListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ICustomer[] | undefined;
}

export class CustomerResponse implements ICustomerResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Customer;

    constructor(data?: ICustomerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new Customer(data.data) : <Customer>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? Customer.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomerResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ICustomer;
}

export class DeliveryMethod implements IDeliveryMethod {
    id?: number;
    twId?: number;
    active?: boolean;
    name?: string | undefined;
    priceNet?: number;
    priceGross?: number;
    taxRate?: number;

    constructor(data?: IDeliveryMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.twId = _data["twId"];
            this.active = _data["active"];
            this.name = _data["name"];
            this.priceNet = _data["priceNet"];
            this.priceGross = _data["priceGross"];
            this.taxRate = _data["taxRate"];
        }
    }

    static fromJS(data: any): DeliveryMethod {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["twId"] = this.twId;
        data["active"] = this.active;
        data["name"] = this.name;
        data["priceNet"] = this.priceNet;
        data["priceGross"] = this.priceGross;
        data["taxRate"] = this.taxRate;
        return data;
    }
}

export interface IDeliveryMethod {
    id?: number;
    twId?: number;
    active?: boolean;
    name?: string | undefined;
    priceNet?: number;
    priceGross?: number;
    taxRate?: number;
}

export class DeliveryMethodsResponse implements IDeliveryMethodsResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: DeliveryMethod[] | undefined;

    constructor(data?: IDeliveryMethodsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new DeliveryMethod(item) : <DeliveryMethod>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeliveryMethod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeliveryMethodsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryMethodsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeliveryMethodsResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IDeliveryMethod[] | undefined;
}

export class Document implements IDocument {
    id?: number | undefined;
    customerId?: number;
    customer?: Customer;
    documentType?: string | undefined;
    number?: string | undefined;
    items?: DocumentItem[] | undefined;
    cashPayment?: number;
    totalNet?: number;
    totalGross?: number;
    paymentToBeSettled?: number;
    secondPaymentAmount?: number;
    paymentDueDays?: number;
    secondPaymentMethod?: number | undefined;
    deliveryMethod?: number | undefined;
    packagesNumber?: number | undefined;
    comment?: string | undefined;
    userId?: number | undefined;
    userName?: string | undefined;
    issueDate?: Date;

    constructor(data?: IDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.customer = data.customer && !(<any>data.customer).toJSON ? new Customer(data.customer) : <Customer>this.customer;
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new DocumentItem(item) : <DocumentItem>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.customerId = _data["customerId"];
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : <any>undefined;
            this.documentType = _data["documentType"];
            this.number = _data["number"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DocumentItem.fromJS(item));
            }
            this.cashPayment = _data["cashPayment"];
            this.totalNet = _data["totalNet"];
            this.totalGross = _data["totalGross"];
            this.paymentToBeSettled = _data["paymentToBeSettled"];
            this.secondPaymentAmount = _data["secondPaymentAmount"];
            this.paymentDueDays = _data["paymentDueDays"];
            this.secondPaymentMethod = _data["secondPaymentMethod"];
            this.deliveryMethod = _data["deliveryMethod"];
            this.packagesNumber = _data["packagesNumber"];
            this.comment = _data["comment"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.issueDate = _data["issueDate"] ? new Date(_data["issueDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Document {
        data = typeof data === 'object' ? data : {};
        let result = new Document();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["documentType"] = this.documentType;
        data["number"] = this.number;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["cashPayment"] = this.cashPayment;
        data["totalNet"] = this.totalNet;
        data["totalGross"] = this.totalGross;
        data["paymentToBeSettled"] = this.paymentToBeSettled;
        data["secondPaymentAmount"] = this.secondPaymentAmount;
        data["paymentDueDays"] = this.paymentDueDays;
        data["secondPaymentMethod"] = this.secondPaymentMethod;
        data["deliveryMethod"] = this.deliveryMethod;
        data["packagesNumber"] = this.packagesNumber;
        data["comment"] = this.comment;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["issueDate"] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDocument {
    id?: number | undefined;
    customerId?: number;
    customer?: ICustomer;
    documentType?: string | undefined;
    number?: string | undefined;
    items?: IDocumentItem[] | undefined;
    cashPayment?: number;
    totalNet?: number;
    totalGross?: number;
    paymentToBeSettled?: number;
    secondPaymentAmount?: number;
    paymentDueDays?: number;
    secondPaymentMethod?: number | undefined;
    deliveryMethod?: number | undefined;
    packagesNumber?: number | undefined;
    comment?: string | undefined;
    userId?: number | undefined;
    userName?: string | undefined;
    issueDate?: Date;
}

export class DocumentItem implements IDocumentItem {
    productId?: number;
    quantity?: number;
    priceNet?: number;
    priceGross?: number;
    lineNet?: number;
    lineGross?: number;
    taxRate?: number;
    discountRate?: number;
    promoSetId?: number | undefined;
    promoItemId?: number | undefined;
    product?: Product;

    constructor(data?: IDocumentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.product = data.product && !(<any>data.product).toJSON ? new Product(data.product) : <Product>this.product;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.priceNet = _data["priceNet"];
            this.priceGross = _data["priceGross"];
            this.lineNet = _data["lineNet"];
            this.lineGross = _data["lineGross"];
            this.taxRate = _data["taxRate"];
            this.discountRate = _data["discountRate"];
            this.promoSetId = _data["promoSetId"];
            this.promoItemId = _data["promoItemId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentItem {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["priceNet"] = this.priceNet;
        data["priceGross"] = this.priceGross;
        data["lineNet"] = this.lineNet;
        data["lineGross"] = this.lineGross;
        data["taxRate"] = this.taxRate;
        data["discountRate"] = this.discountRate;
        data["promoSetId"] = this.promoSetId;
        data["promoItemId"] = this.promoItemId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDocumentItem {
    productId?: number;
    quantity?: number;
    priceNet?: number;
    priceGross?: number;
    lineNet?: number;
    lineGross?: number;
    taxRate?: number;
    discountRate?: number;
    promoSetId?: number | undefined;
    promoItemId?: number | undefined;
    product?: IProduct;
}

export class DocumentResponse implements IDocumentResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Document[] | undefined;

    constructor(data?: IDocumentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new Document(item) : <Document>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Document.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDocumentResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IDocument[] | undefined;
}

export class Login implements ILogin {
    token?: string | undefined;
    expirationDate?: Date;
    user?: User;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new User(data.user) : <User>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILogin {
    token?: string | undefined;
    expirationDate?: Date;
    user?: IUser;
}

export class LoginRequest implements ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;
}

export class LoginResponse implements ILoginResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Login;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new Login(data.data) : <Login>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? Login.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILoginResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ILogin;
}

export class Payment implements IPayment {
    relatedDocumentId?: number;
    relatedDocumentNumber?: string | undefined;
    issueDate?: Date;
    value?: number;
    title?: string | undefined;
    payerId?: number;
    fromPerson?: string | undefined;
    toPerson?: string | undefined;
    paymentType?: number;

    constructor(data?: IPayment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relatedDocumentId = _data["relatedDocumentId"];
            this.relatedDocumentNumber = _data["relatedDocumentNumber"];
            this.issueDate = _data["issueDate"] ? new Date(_data["issueDate"].toString()) : <any>undefined;
            this.value = _data["value"];
            this.title = _data["title"];
            this.payerId = _data["payerId"];
            this.fromPerson = _data["fromPerson"];
            this.toPerson = _data["toPerson"];
            this.paymentType = _data["paymentType"];
        }
    }

    static fromJS(data: any): Payment {
        data = typeof data === 'object' ? data : {};
        let result = new Payment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relatedDocumentId"] = this.relatedDocumentId;
        data["relatedDocumentNumber"] = this.relatedDocumentNumber;
        data["issueDate"] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
        data["value"] = this.value;
        data["title"] = this.title;
        data["payerId"] = this.payerId;
        data["fromPerson"] = this.fromPerson;
        data["toPerson"] = this.toPerson;
        data["paymentType"] = this.paymentType;
        return data;
    }
}

export interface IPayment {
    relatedDocumentId?: number;
    relatedDocumentNumber?: string | undefined;
    issueDate?: Date;
    value?: number;
    title?: string | undefined;
    payerId?: number;
    fromPerson?: string | undefined;
    toPerson?: string | undefined;
    paymentType?: number;
}

export class PaymentMethod implements IPaymentMethod {
    id?: number;
    fpId?: number;
    name?: string | undefined;
    deferred?: boolean;

    constructor(data?: IPaymentMethod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fpId = _data["fpId"];
            this.name = _data["name"];
            this.deferred = _data["deferred"];
        }
    }

    static fromJS(data: any): PaymentMethod {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fpId"] = this.fpId;
        data["name"] = this.name;
        data["deferred"] = this.deferred;
        return data;
    }
}

export interface IPaymentMethod {
    id?: number;
    fpId?: number;
    name?: string | undefined;
    deferred?: boolean;
}

export class PaymentMethodsResponse implements IPaymentMethodsResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PaymentMethod[] | undefined;

    constructor(data?: IPaymentMethodsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new PaymentMethod(item) : <PaymentMethod>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PaymentMethod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentMethodsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPaymentMethodsResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPaymentMethod[] | undefined;
}

export class Price implements IPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    taxPercent?: number | undefined;
    taxName?: string | undefined;
    currencyId?: number | undefined;

    constructor(data?: IPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.priceNet = _data["priceNet"];
            this.priceGross = _data["priceGross"];
            this.currencyName = _data["currencyName"];
            this.taxPercent = _data["taxPercent"];
            this.taxName = _data["taxName"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): Price {
        data = typeof data === 'object' ? data : {};
        let result = new Price();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["priceNet"] = this.priceNet;
        data["priceGross"] = this.priceGross;
        data["currencyName"] = this.currencyName;
        data["taxPercent"] = this.taxPercent;
        data["taxName"] = this.taxName;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IPrice {
    id?: number;
    name?: string | undefined;
    priceNet?: number | undefined;
    priceGross?: number | undefined;
    currencyName?: string | undefined;
    taxPercent?: number | undefined;
    taxName?: string | undefined;
    currencyId?: number | undefined;
}

export class PriceLevel implements IPriceLevel {
    id?: number;
    name?: string | undefined;
    primary?: boolean;
    checked?: boolean;

    constructor(data?: IPriceLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.primary = _data["primary"];
            this.checked = _data["checked"];
        }
    }

    static fromJS(data: any): PriceLevel {
        data = typeof data === 'object' ? data : {};
        let result = new PriceLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["primary"] = this.primary;
        data["checked"] = this.checked;
        return data;
    }
}

export interface IPriceLevel {
    id?: number;
    name?: string | undefined;
    primary?: boolean;
    checked?: boolean;
}

export class Product implements IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: Price;
    prices?: { [key: string]: Price; } | undefined;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;
    unit?: string | undefined;
    imgUrl?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.price = data.price && !(<any>data.price).toJSON ? new Price(data.price) : <Price>this.price;
            if (data.prices) {
                this.prices = {};
                for (let key in data.prices) {
                    if (data.prices.hasOwnProperty(key)) {
                        let item = data.prices[key];
                        this.prices[key] = item && !(<any>item).toJSON ? new Price(item) : <Price>item;
                    }
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.stock = _data["stock"];
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            if (_data["prices"]) {
                this.prices = {} as any;
                for (let key in _data["prices"]) {
                    if (_data["prices"].hasOwnProperty(key))
                        (<any>this.prices)![key] = _data["prices"][key] ? Price.fromJS(_data["prices"][key]) : new Price();
                }
            }
            this.categoryName = _data["categoryName"];
            this.categoryId = _data["categoryId"];
            this.barCode = _data["barCode"];
            this.imagesCount = _data["imagesCount"];
            this.unit = _data["unit"];
            this.imgUrl = _data["imgUrl"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["description"] = this.description;
        data["stock"] = this.stock;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        if (this.prices) {
            data["prices"] = {};
            for (let key in this.prices) {
                if (this.prices.hasOwnProperty(key))
                    (<any>data["prices"])[key] = this.prices[key] ? this.prices[key].toJSON() : <any>undefined;
            }
        }
        data["categoryName"] = this.categoryName;
        data["categoryId"] = this.categoryId;
        data["barCode"] = this.barCode;
        data["imagesCount"] = this.imagesCount;
        data["unit"] = this.unit;
        data["imgUrl"] = this.imgUrl;
        return data;
    }
}

export interface IProduct {
    id?: number;
    code?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    stock?: number;
    price?: IPrice;
    prices?: { [key: string]: IPrice; } | undefined;
    categoryName?: string | undefined;
    categoryId?: number;
    barCode?: string | undefined;
    imagesCount?: number;
    unit?: string | undefined;
    imgUrl?: string | undefined;
}

export class ProductCategory implements IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: ProductCategory[] | undefined;
    parentId?: number | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.subcategories) {
                this.subcategories = [];
                for (let i = 0; i < data.subcategories.length; i++) {
                    let item = data.subcategories[i];
                    this.subcategories[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["subcategories"])) {
                this.subcategories = [] as any;
                for (let item of _data["subcategories"])
                    this.subcategories!.push(ProductCategory.fromJS(item));
            }
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.subcategories)) {
            data["subcategories"] = [];
            for (let item of this.subcategories)
                data["subcategories"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface IProductCategory {
    id?: number;
    name?: string | undefined;
    subcategories?: IProductCategory[] | undefined;
    parentId?: number | undefined;
}

export class ProductCategoryInfoResponse implements IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory;

    constructor(data?: IProductCategoryInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new ProductCategory(data.data) : <ProductCategory>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? ProductCategory.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductCategoryInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductCategoryInfoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory;
}

export class ProductCategoryListResponse implements IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: ProductCategory[] | undefined;

    constructor(data?: IProductCategoryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductCategoryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductCategoryListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProductCategory[] | undefined;
}

export class ProductListRequest implements IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;

    constructor(data?: IProductListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): ProductListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IProductListRequest {
    pageNo?: number | undefined;
    pageSize?: number | undefined;
    categoryId?: number | undefined;
}

export class ProductListResponse implements IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product[] | undefined;

    constructor(data?: IProductListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new Product(item) : <Product>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct[] | undefined;
}

export class ProductRequest implements IProductRequest {
    productId?: number;

    constructor(data?: IProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): ProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        return data;
    }
}

export interface IProductRequest {
    productId?: number;
}

export class ProductResponse implements IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: Product;

    constructor(data?: IProductResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new Product(data.data) : <Product>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? Product.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IProduct;
}

export class PromoItem implements IPromoItem {
    id?: number;
    name?: string | undefined;
    setId?: number;
    gratis?: boolean;
    price?: Price;
    quantity?: number;
    discountPercent?: number;
    minimumPrice?: number | undefined;
    discountSetId?: number;
    products?: PromoItemProduct[] | undefined;

    constructor(data?: IPromoItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.price = data.price && !(<any>data.price).toJSON ? new Price(data.price) : <Price>this.price;
            if (data.products) {
                this.products = [];
                for (let i = 0; i < data.products.length; i++) {
                    let item = data.products[i];
                    this.products[i] = item && !(<any>item).toJSON ? new PromoItemProduct(item) : <PromoItemProduct>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.setId = _data["setId"];
            this.gratis = _data["gratis"];
            this.price = _data["price"] ? Price.fromJS(_data["price"]) : <any>undefined;
            this.quantity = _data["quantity"];
            this.discountPercent = _data["discountPercent"];
            this.minimumPrice = _data["minimumPrice"];
            this.discountSetId = _data["discountSetId"];
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(PromoItemProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoItem {
        data = typeof data === 'object' ? data : {};
        let result = new PromoItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["setId"] = this.setId;
        data["gratis"] = this.gratis;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        data["discountPercent"] = this.discountPercent;
        data["minimumPrice"] = this.minimumPrice;
        data["discountSetId"] = this.discountSetId;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoItem {
    id?: number;
    name?: string | undefined;
    setId?: number;
    gratis?: boolean;
    price?: IPrice;
    quantity?: number;
    discountPercent?: number;
    minimumPrice?: number | undefined;
    discountSetId?: number;
    products?: IPromoItemProduct[] | undefined;
}

export class PromoItemProduct implements IPromoItemProduct {
    promoItemId?: number;
    productCode?: string | undefined;
    promoItem?: PromoItem;

    constructor(data?: IPromoItemProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.promoItem = data.promoItem && !(<any>data.promoItem).toJSON ? new PromoItem(data.promoItem) : <PromoItem>this.promoItem;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.promoItemId = _data["promoItemId"];
            this.productCode = _data["productCode"];
            this.promoItem = _data["promoItem"] ? PromoItem.fromJS(_data["promoItem"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoItemProduct {
        data = typeof data === 'object' ? data : {};
        let result = new PromoItemProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["promoItemId"] = this.promoItemId;
        data["productCode"] = this.productCode;
        data["promoItem"] = this.promoItem ? this.promoItem.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoItemProduct {
    promoItemId?: number;
    productCode?: string | undefined;
    promoItem?: IPromoItem;
}

export class PromoResponse implements IPromoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoItem;

    constructor(data?: IPromoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new PromoItem(data.data) : <PromoItem>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? PromoItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoItem;
}

export class PromoSet implements IPromoSet {
    id?: number;
    isDeleted?: boolean;
    validFrom?: Date | undefined;
    validUntil?: Date | undefined;
    name?: string | undefined;
    dataChange?: Date;
    groupChangeDate?: Date | undefined;
    imgUrl?: string | undefined;
    typ?: number;
    items?: PromoItem[] | undefined;

    constructor(data?: IPromoSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.items) {
                this.items = [];
                for (let i = 0; i < data.items.length; i++) {
                    let item = data.items[i];
                    this.items[i] = item && !(<any>item).toJSON ? new PromoItem(item) : <PromoItem>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validUntil = _data["validUntil"] ? new Date(_data["validUntil"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dataChange = _data["dataChange"] ? new Date(_data["dataChange"].toString()) : <any>undefined;
            this.groupChangeDate = _data["groupChangeDate"] ? new Date(_data["groupChangeDate"].toString()) : <any>undefined;
            this.imgUrl = _data["imgUrl"];
            this.typ = _data["typ"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PromoItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoSet {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validUntil"] = this.validUntil ? this.validUntil.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["dataChange"] = this.dataChange ? this.dataChange.toISOString() : <any>undefined;
        data["groupChangeDate"] = this.groupChangeDate ? this.groupChangeDate.toISOString() : <any>undefined;
        data["imgUrl"] = this.imgUrl;
        data["typ"] = this.typ;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoSet {
    id?: number;
    isDeleted?: boolean;
    validFrom?: Date | undefined;
    validUntil?: Date | undefined;
    name?: string | undefined;
    dataChange?: Date;
    groupChangeDate?: Date | undefined;
    imgUrl?: string | undefined;
    typ?: number;
    items?: IPromoItem[] | undefined;
}

export class PromoSetListResponse implements IPromoSetListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoSet[] | undefined;

    constructor(data?: IPromoSetListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new PromoSet(item) : <PromoSet>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PromoSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PromoSetListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSetListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPromoSetListResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoSet[] | undefined;
}

export class PromoSetResponse implements IPromoSetResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: PromoSet;

    constructor(data?: IPromoSetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new PromoSet(data.data) : <PromoSet>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"] ? PromoSet.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PromoSetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PromoSetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPromoSetResponse {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: IPromoSet;
}

export class SearchResponse implements ISearchResponse {
    productCategories?: ProductCategory[] | undefined;
    products?: Product[] | undefined;

    constructor(data?: ISearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.productCategories) {
                this.productCategories = [];
                for (let i = 0; i < data.productCategories.length; i++) {
                    let item = data.productCategories[i];
                    this.productCategories[i] = item && !(<any>item).toJSON ? new ProductCategory(item) : <ProductCategory>item;
                }
            }
            if (data.products) {
                this.products = [];
                for (let i = 0; i < data.products.length; i++) {
                    let item = data.products[i];
                    this.products[i] = item && !(<any>item).toJSON ? new Product(item) : <Product>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["productCategories"])) {
                this.productCategories = [] as any;
                for (let item of _data["productCategories"])
                    this.productCategories!.push(ProductCategory.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productCategories)) {
            data["productCategories"] = [];
            for (let item of this.productCategories)
                data["productCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISearchResponse {
    productCategories?: IProductCategory[] | undefined;
    products?: IProduct[] | undefined;
}

export class StringApiResult implements IStringApiResult {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: string | undefined;

    constructor(data?: IStringApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isError = _data["isError"];
            this.message = _data["message"];
            this.morePages = _data["morePages"];
            this.totalPages = _data["totalPages"];
            this.itemsPerPage = _data["itemsPerPage"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): StringApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isError"] = this.isError;
        data["message"] = this.message;
        data["morePages"] = this.morePages;
        data["totalPages"] = this.totalPages;
        data["itemsPerPage"] = this.itemsPerPage;
        data["data"] = this.data;
        return data;
    }
}

export interface IStringApiResult {
    isError?: boolean;
    message?: string | undefined;
    morePages?: boolean;
    totalPages?: number | undefined;
    itemsPerPage?: number | undefined;
    data?: string | undefined;
}

export class User implements IUser {
    id?: number;
    login?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    storeName?: string | undefined;
    kasa?: string | undefined;
    cechaId?: number | undefined;
    cechaNazwa?: string | undefined;
    defaultPrice?: number;
    priceLevelList?: PriceLevel[] | undefined;
    specialPayment?: boolean;
    specialPaymentExtendDeadline?: boolean;
    maxSpecialPayment?: number;
    minSpecialPayment?: number;
    promocjaGrupaId?: number;
    discountAllowed?: boolean;
    canExtendPaymentDeadline?: boolean;
    discountMax?: number;
    token?: string | undefined;
    expirationDate?: Date;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.priceLevelList) {
                this.priceLevelList = [];
                for (let i = 0; i < data.priceLevelList.length; i++) {
                    let item = data.priceLevelList[i];
                    this.priceLevelList[i] = item && !(<any>item).toJSON ? new PriceLevel(item) : <PriceLevel>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.storeName = _data["storeName"];
            this.kasa = _data["kasa"];
            this.cechaId = _data["cechaId"];
            this.cechaNazwa = _data["cechaNazwa"];
            this.defaultPrice = _data["defaultPrice"];
            if (Array.isArray(_data["priceLevelList"])) {
                this.priceLevelList = [] as any;
                for (let item of _data["priceLevelList"])
                    this.priceLevelList!.push(PriceLevel.fromJS(item));
            }
            this.specialPayment = _data["specialPayment"];
            this.specialPaymentExtendDeadline = _data["specialPaymentExtendDeadline"];
            this.maxSpecialPayment = _data["maxSpecialPayment"];
            this.minSpecialPayment = _data["minSpecialPayment"];
            this.promocjaGrupaId = _data["promocjaGrupaId"];
            this.discountAllowed = _data["discountAllowed"];
            this.canExtendPaymentDeadline = _data["canExtendPaymentDeadline"];
            this.discountMax = _data["discountMax"];
            this.token = _data["token"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["storeName"] = this.storeName;
        data["kasa"] = this.kasa;
        data["cechaId"] = this.cechaId;
        data["cechaNazwa"] = this.cechaNazwa;
        data["defaultPrice"] = this.defaultPrice;
        if (Array.isArray(this.priceLevelList)) {
            data["priceLevelList"] = [];
            for (let item of this.priceLevelList)
                data["priceLevelList"].push(item.toJSON());
        }
        data["specialPayment"] = this.specialPayment;
        data["specialPaymentExtendDeadline"] = this.specialPaymentExtendDeadline;
        data["maxSpecialPayment"] = this.maxSpecialPayment;
        data["minSpecialPayment"] = this.minSpecialPayment;
        data["promocjaGrupaId"] = this.promocjaGrupaId;
        data["discountAllowed"] = this.discountAllowed;
        data["canExtendPaymentDeadline"] = this.canExtendPaymentDeadline;
        data["discountMax"] = this.discountMax;
        data["token"] = this.token;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUser {
    id?: number;
    login?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    storeName?: string | undefined;
    kasa?: string | undefined;
    cechaId?: number | undefined;
    cechaNazwa?: string | undefined;
    defaultPrice?: number;
    priceLevelList?: IPriceLevel[] | undefined;
    specialPayment?: boolean;
    specialPaymentExtendDeadline?: boolean;
    maxSpecialPayment?: number;
    minSpecialPayment?: number;
    promocjaGrupaId?: number;
    discountAllowed?: boolean;
    canExtendPaymentDeadline?: boolean;
    discountMax?: number;
    token?: string | undefined;
    expirationDate?: Date;
}